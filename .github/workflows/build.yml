name: Build and Test

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pylint
          
      - name: Run pylint on changed files
        run: |
          # Get list of changed Python files
          CHANGED_FILES=$(git diff --name-only --diff-filter=d origin/main HEAD | grep "\.py$" || true)
          if [ -n "$CHANGED_FILES" ]; then
            python -m pylint --rcfile=.pylintrc $CHANGED_FILES
          else
            echo "No Python files changed"
          fi
          
      - name: Run pytest
        run: |
          pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=warc_processor --cov-report=xml
          
      - name: Install PyInstaller
        run: python -m pip install pyinstaller

      - name: Get version
        id: version
        run: |
          # Read current version
          VERSION=$(python3 -c "exec(open('warc_processor/version.py').read()); print(__version__)")
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build binary
        run: |
          RELEASE_NAME="warc-processor-${{ steps.version.outputs.version }}-linux-x86_64"
          RELEASE_DIR="dist/${RELEASE_NAME}"
          rm -rf build dist/*
          mkdir -p "${RELEASE_DIR}"
          python -m PyInstaller \
            --onefile \
            --name warc-processor \
            warc_processor_main.py

      - name: Package release
        run: |
          RELEASE_NAME="warc-processor-${{ steps.version.outputs.version }}-linux-x86_64"
          RELEASE_DIR="dist/${RELEASE_NAME}"
          cp dist/warc-processor "${RELEASE_DIR}/"

          [ -f README.md ] && cp README.md "${RELEASE_DIR}/" || echo "No README.md found"
          [ -f LICENSE ] && cp LICENSE "${RELEASE_DIR}/" || echo "No LICENSE found"
          cat > "${RELEASE_DIR}/QUICKSTART.md" << 'EOF'
          # WARC Processor Quick Start Guide

          This is a standalone binary release of the WARC Processor tool.

          ## Usage

          1. Make the binary executable:
             chmod +x warc-processor

          2. Run the processor:
             ./warc-processor --input input.warc --output output.txt

          The binary includes all necessary dependencies and does not require Python to be installed.

          For full documentation, please see README.md
          EOF
          cd dist
          tar czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}"
          rm -rf "${RELEASE_NAME}"
          echo "Created release archive: dist/${RELEASE_NAME}.tar.gz"
      - name: Test binary
        run: |
          RELEASE_NAME="warc-processor-${{ steps.version.outputs.version }}-linux-x86_64"
          echo "Testing binary for release: ${RELEASE_NAME}"
          # Extract the archive
          mkdir -p dist/test_extract
          tar -xzf "dist/${RELEASE_NAME}.tar.gz" -C dist/test_extract
          # Run the binary with --help and check output
          OUTPUT=$(dist/test_extract/${RELEASE_NAME}/warc-processor --help || true)
          echo "$OUTPUT"
          if [[ "$OUTPUT" != *"usage"* ]]; then
            echo "Binary test failed: missing 'usage' in output"
            exit 1
          fi
          echo "Binary test passed"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: warc-processor-binary
          path: dist/warc-processor-*.tar.gz
          overwrite: true  # Overwrite existing artifacts
