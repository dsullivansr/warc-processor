name: Build and Test

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install yapf pylint
          
      - name: Run yapf
        run: |
          python -m yapf --diff --recursive warc_processor tests
          
      - name: Run pylint
        run: |
          python -m pylint --rcfile=.pylintrc warc_processor tests
          
      - name: Run pytest
        run: |
          pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=warc_processor --cov-report=xml
          
      - name: Install PyInstaller
        run: python -m pip install pyinstaller

      - name: Increment version
        id: version
        run: |
          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Read current version
          VERSION=$(python3 -c "exec(open('warc_processor/version.py').read()); print(__version__)")
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Check commit message for version bump type
          if [[ "$COMMIT_MSG" == "feat!"* ]] || [[ "$COMMIT_MSG" == "BREAKING CHANGE"* ]]; then
            # Major version bump (not used while in 0.x.x)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            echo "Major change detected, but staying at 0.x.x for now"
          elif [[ "$COMMIT_MSG" == "feat:"* ]] || [[ "$COMMIT_MSG" == "feat("* ]]; then
            # Minor version bump
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            echo "Minor version bump for new feature"
          else
            # Patch version bump
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            echo "Patch version bump"
          fi
          # Update version.py
          echo "\"\"\"Version information.\"\"\"

__version__ = \"${NEW_VERSION}\"" > warc_processor/version.py
          # Set output for later steps
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Commit version bump
          git add warc_processor/version.py
          git commit -m "chore: bump version to ${NEW_VERSION}"
          git push

      - name: Build binary
        run: |
          RELEASE_NAME="warc-processor-${{ steps.version.outputs.version }}-linux-x86_64"
          RELEASE_DIR="dist/${RELEASE_NAME}"
          rm -rf build dist/*
          mkdir -p "${RELEASE_DIR}"
          python -m PyInstaller \
            --onefile \
            --name warc-processor \
            --add-data "config.yaml:." \
            warc_processor_main.py

      - name: Package release
        run: |
          RELEASE_NAME="warc-processor-${{ steps.version.outputs.version }}-linux-x86_64"
          RELEASE_DIR="dist/${RELEASE_NAME}"
          cp dist/warc-processor "${RELEASE_DIR}/"
          cp config.yaml "${RELEASE_DIR}/"
          cp README.md "${RELEASE_DIR}/"
          cp LICENSE "${RELEASE_DIR}/"
          cat > "${RELEASE_DIR}/QUICKSTART.md" << 'EOF'
          # WARC Processor Quick Start Guide

          This is a standalone binary release of the WARC Processor tool.

          ## Usage

          1. Make the binary executable:
             chmod +x warc-processor

          2. Run the processor:
             ./warc-processor --input input.warc --output output.txt

          The binary includes all necessary dependencies and does not require Python to be installed.

          For full documentation, please see README.md
          EOF
          cd dist
          tar czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}"
          rm -rf "${RELEASE_NAME}"
          echo "Created release archive: dist/${RELEASE_NAME}.tar.gz"
      - name: Test binary
        run: |
          RELEASE_NAME="warc-processor-${{ steps.version.outputs.version }}-linux-x86_64"
          echo "Testing binary for release: ${RELEASE_NAME}"
          # Extract the archive
          mkdir -p dist/test_extract
          tar -xzf "dist/${RELEASE_NAME}.tar.gz" -C dist/test_extract
          # Run the binary with --help and check output
          OUTPUT=$(dist/test_extract/${RELEASE_NAME}/warc-processor --help || true)
          echo "$OUTPUT"
          if [[ "$OUTPUT" != *"Usage"* ]]; then
            echo "Binary test failed: missing 'Usage' in output"
            exit 1
          fi
          echo "Binary test passed"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: warc-processor-binary
          path: dist/warc-processor-*.tar.gz
